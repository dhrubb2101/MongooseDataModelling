-whenever we are making a backend your first question should be what kind of data or fields are we storing like what the format is
like whether we have to store username,password and photos,videos

-for backend we will be using js and for database we are using mongo db and which can be easily transferred to mysql and

-there are some professional tools to store data when doing work professionally.

-the most famous tool is Moon Modeler it basically defines a structure for the data.

-A moon modeler typically refers to a data modeling tool used for designing database schemas, especially for NoSQL databases like MongoDB, PostgreSQL, or relational databases. It's a graphical tool that helps in planning and visualizing database structures.

What Does It Do?
Database Schema Design: Helps create tables, collections, relationships, indexes, etc.

Visual Representation: Offers an intuitive graphical interface to map out the structure of the database.

Documentation: Automatically generates schema documentation for database structures.

Export/Import: Allows exporting models to scripts (like SQL or JSON) or importing existing database schemas.

Collaboration: Facilitates teamwork by sharing models with developers and stakeholders.

Example: Hospital Management System
Entities:

Patients: Stores patient details (ID, name, age, contact info, etc.).

Doctors: Stores doctor details (ID, specialization, availability, etc.).

Appointments: Tracks appointments with doctor-patient relationships.

Pharmacy: Manages medicine stocks and sales.

Billing: Handles invoices and payments.

Relationships:

A Patient can have multiple Appointments.

A Doctor can handle multiple Patients.

Billing is tied to Appointments and Pharmacy.

Visualization:
A moon modeler tool will visually map this database structure, showing how Patients, Doctors, Appointments, Pharmacy, and Billing are interconnected. It makes it easier to conceptualize, implement, and maintain.

-You draw diagram here and add fields and it provides you a ready script for it and it is not that tough.
-it is costly

-eraser.io is also a tool used for data modelling

-here click on "diagram as a code" and it presents you with a format of data
on the right you can find the source code on eraser.io

//To ensure what fields we are taking we first create a screen to validate it
and first create a screen where the data will save
so we take a registeration form
where we will store
//username
//email
//password
//photo
//DOB
//first thing to worry when buiding a backend is what data we are storing
//and what format we are storing it and what fields we are storing

/Then comes the login page
//login doesnt take new entries it takes existing entries already stored in database and validate them
//To build a to-do application
//in this screen we will display many to do's like I have created three-four boxes one headlined youtube , another job , another gym
and in youtube box we create further to do's which contains box which involve
to do's content and markedAsDone field and creation date and colors also

//For main to do in youtube which gives the main heading so thhat gives us one field
create one to-do named title field inside box and also to make it a colorful box we can add a color field for all the major todo's and also create another field which mention user who created the major todo's.
Also add another field which mentions the subTodo's which are created inside the major todo's it will be an array which contains all the objects of subTodo's

//prisma and mongoose are helpful tooks for data modelling.
////Prisma is an ORM (Object-Relational Mapping) tool that simplifies database interactions in Node.js applications.
//It provides a type-safe API for querying databases, making it easier to work with data models and perform CRUD operations.

==============================================================================
todos is a backend application we're gonna make
//how to enter data into it is controller's problem
//we'll be focussing on the data present in todos and how to store it

//we'll be using mongoose to store data in mongo db
//mongoose is a library that provides a schema-based solution to model your application data
//it provides a way to define the structure of your data and how it should be stored in the database
//we'll be seeing here how mongoose builds the model and exports it to be used in the application
//schema here is a method which takes an object as an argument

//we're practicing how to do data modelling
//written notes ahead in sub_todos.js file
//now to create the todo model we need to define the schema for it

//So in Todo we added rederence of both user model and sub-todo model we do it by defining type and red in a specific format and in ref we take the name of database we define like "User" and "SubTodo" and type is defined as mongoose.Schema.Types.ObjectId and then we define entries in subTodo as an array of objects and then go on to decide the entries in SubTodo

# //defined the subtodo schema and referenced the user model

Ecommerce data modeling example
//In an e-commerce application, data modeling is crucial for organizing and managing various entities like products, customers, orders, and payments. Here's a simple example of how you might structure the data model for an e-commerce platform using Mongoose:

//In MongoDB, storing large files like images, PDFs, or other binary data is typically not done directly in the database as it can make the database inefficient. Instead, a combination of file storage and MongoDB is often used. Here's how you can handle it:

1. Use a Cloud Storage Service
   Examples: AWS S3, Google Cloud Storage, Azure Blob Storage.

Workflow:

Upload the file (image/PDF) to the cloud storage service.

Store the file's URL (or metadata) in MongoDB.

When retrieving, use the stored URL to fetch the file.

//for ecommerce created category,product,order,user.model.js files
started with user then category then product then order

//for hospital management data modeling created doctor,hospital,patient,medical-records js files
//started with patient then doctors then hospital
